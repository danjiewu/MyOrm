<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a C# class for use with NHibnate" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the mapping file is based on" %>
<%@ Property Name="Namespace" Type="System.String" Default="MyNamespace.Data" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Property Name="Assembly" Type="System.String" Default="MyApp.MyAssembly" Category="Object" Description="The assembly that the class will be used in" %>
<%@ Property Name="RemoveTablePrefix" Type="System.String" Default="tbl" Category="Object" Description="The prefix to remove from table names" %>
<%@ Property Name="DAONameFormat" Type="System.String" Default="{0}DAO" Category="Object" Description="Name of obejct DAO" %>
<%@ Property Name="InterfaceNameFormat" Type="System.String" Default="I{0}DAO" Category="Object" Description="Name of interface of obejct DAO" %>
<%@ Property Name="UseNullable" Type="System.Boolean" Default="true" Category="Object" Description="Allow to use the type System.Nullable<T>." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<!-- #include file="MyORM.inc" -->
<script runat="template">
private string DAOName{
 	get{return string.Format(DAONameFormat,ClassName(SourceTable));}
}

private string ViewDAOName{
	get{return string.Format(DAONameFormat,ViewName(SourceTable));}
}

private string InterfaceName{
 	get{return string.Format(InterfaceNameFormat,ClassName(SourceTable));}
}

private string ViewInterfaceName{
 	get{return string.Format(InterfaceNameFormat,ViewName(SourceTable));}
}
</script>
using System;
using System.Data;
using System.Collections.Generic;
using MyOrm.Common;
using MyOrm;

namespace <%= Namespace %>
{	
	#region <%= DAOName %>
	/// <summary>
	/// DAO for object '<%= ClassName(SourceTable) %>'.
	/// </summary>	
	public partial class <%= DAOName %> : ObjectDAO<%="<"+ClassName(SourceTable)+">"%><%= String.IsNullOrEmpty(InterfaceName) ? null :", " + InterfaceName%> { }
	#endregion

	#region <%= ViewDAOName %>
	/// <summary>
	/// DAO for object's view '<%= ViewClassName(SourceTable) %>'.
	/// </summary>	
	public partial class <%= ViewDAOName %> : ObjectViewDAO<%="<"+ViewClassName(SourceTable)+">"%><%= String.IsNullOrEmpty(ViewInterfaceName) ? null :", " + ViewInterfaceName%>
	{
        <%foreach(ColumnSchema column in SourceTable.Columns){
           if(!column.IsPrimaryKeyMember && column.IsUnique){
            string argName = CamelCase(PropertyName(column));
        %>
        /// <summary>
        /// Get <%= ClassName(SourceTable) %> by unique <%=PropertyName(column)%>.
        /// </summary>
        /// <param name="<%=argName%>"><%=PropertyName(column)%> of the <%=ClassName(SourceTable)%></param>
        /// <returns></returns>
        public <%=ViewClassName(SourceTable)%> GetBy<%=PropertyName(column)%>(<%=NativeType(column)%> <%=argName%>)
        {
            return SearchOne(new SimpleCondition(<%=PropertyString(column,ViewClassName(SourceTable),PropertyName(column))%>, <%=argName%>));
        }
        
        <%
            }
        }
        %> 
        <%foreach(ColumnSchema column in SourceTable.Columns){
           if(!column.IsUnique && IsIndex(column)){
            string argName = CamelCase(PropertyName(column));
        %>
        /// <summary>
        /// Get all the <%=MakePlural(ClassName(SourceTable))%> by <%=PropertyName(column)%>.
        /// </summary>
        /// <param name="<%=argName%>"><%=PropertyName(column)%> of the <%=ClassName(SourceTable)%></param>
        /// <returns></returns>
        public List<<%=ViewClassName(SourceTable)%>> GetAllBy<%=PropertyName(column)%>(<%=NativeType(column)%> <%=argName%>)
        {
            return Search(new SimpleCondition(<%=PropertyString(column,ViewClassName(SourceTable),PropertyName(column))%>, <%=argName%>));
        }
        
        <%
            }
        }
        %>
		<%foreach(TableKeySchema key in SourceTable.ForeignKeys){%>		
        /// <summary>
        /// Get all the <%=MakePlural(ClassName(SourceTable))%> of the <%=ForeignTableAliasName(key)%>.
        /// </summary>
        <%if(key.ForeignKeyMemberColumns.Count == 1){ %>
        <%string argName = CamelCase(ForeignTableAliasName(key)+"ID");%>
        /// <param name="<%=argName%>">ID of <%=ForeignTableAliasName(key)%></param>
        /// <returns></returns>
		public <%="List<" + ViewClassName(SourceTable) + ">"%> GetAllWith<%=ForeignTableAliasName(key)%>(<%=NativeType(key.ForeignKeyMemberColumns[0].Column)%> <%=argName%>)
		{			
			return Search(new SimpleCondition(<%=PropertyString(key.ForeignKeyMemberColumns[0].Column, ViewClassName(SourceTable), PropertyName(key.ForeignKeyMemberColumns[0].Column))%>, <%=argName%>));
			<% } %>
	    <% else{ %>
        <%string argName = CamelCase(ForeignTableAliasName(key));%>
        /// <param name="<%=argName%>"><%=ForeignTableAliasName(key)%></param>
        /// <returns></returns>
		public <%="List<" + ViewClassName(SourceTable) + ">"%> GetAllWith<%=ForeignTableAliasName(key)%>(<%=ClassName(key.PrimaryKeyTable)%> <%=argName%>)
		{
			ConditionSet condtions = new ConditionSet();
			<%for(int i = 0; i < key.ForeignKeyMemberColumns.Count; i++){%>
			condtions.Add(new SimpleCondition(<%=PropertyString(key.ForeignKeyMemberColumns[i].Column, ViewClassName(SourceTable), PropertyName(key.ForeignKeyMemberColumns[i].Column))%>, <%=argName%>.<%=PropertyName(key.PrimaryKeyMemberColumns[0].Column)%>));
			<% } %>
			return Search(condtions);
			<% } %>
		}
		
		<%}%>
	}
	#endregion	
}
