<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a C# class for use with NHibnate" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the mapping file is based on" %>
<%@ Property Name="Namespace" Type="System.String" Default="MyNamespace.Data" Category="Object" Description="The class namespace that the mapping file should use" %>
<%@ Property Name="Assembly" Type="System.String" Default="MyApp.MyAssembly" Category="Object" Description="The assembly that the class will be used in" %>
<%@ Property Name="RemoveTablePrefix" Type="System.String" Default="tbl" Category="Object" Description="The prefix to remove from table names" %>
<%@ Property Name="UseNullable" Type="System.Boolean" Default="true" Category="Object" Description="Allow to use the type System.Nullable<T>." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<!-- #include file="MyORM.inc" -->
<script runat="template">

public string ForeignKeysName(TableKeySchema foreignKey){
	if(foreignKey.ForeignKeyMemberColumns.Count == 1)
	return PropertyString(foreignKey.ForeignKeyMemberColumns[0], ClassName(SourceTable), PropertyName(foreignKey.ForeignKeyMemberColumns[0]));
	List<string> foreignKeys = new List<string>();
	foreach(ColumnSchema column in foreignKey.ForeignKeyMemberColumns){
		foreignKeys.Add(PropertyName(column));
	}
	foreignKeys.Sort();
	return String.Join(",",foreignKeys.ToArray());
}

</script>
using System;
using System.Data;

namespace <%= Namespace %>
{	
	#region <%= ClassName(SourceTable) %>
	/// <summary>
	/// <%= ClassName(SourceTable) %>.
	<% if(!String.IsNullOrEmpty(SourceTable.Description)){%>
	/// <%=SourceTable.Description%>
	<% } %>
	/// </summary>
	[Table("<%= SourceTable.Name %>")]	
	[Serializable]
	public partial class <%= ClassName(SourceTable) %> : EntityBase
	{		
        <%if(SourceTable.Columns.Count>0){%>
		#region Constant
        public static class Properties
        {
		<% foreach(ColumnSchema column in SourceTable.Columns) { %>
		    public const string	<%= PropertyName(column )%> = "<%= PropertyName(column) %>";
		<% } %>		
        }
		#endregion
        <%}%>		

		#region Public Properties
		<% foreach(ColumnSchema column in SourceTable.Columns) { %>
		/// <summary>
		/// <%=String.IsNullOrEmpty(column.Description)?PropertyName(column):column.Description%>
		/// </summary>
        <%if(column.IsForeignKeyMember){        
        foreach(TableKeySchema foreignKey in SourceTable.ForeignKeys){
            if(foreignKey.ForeignKeyMemberColumns.Count==1&&  Equals(foreignKey.ForeignKeyMemberColumns[0], column)){%>
        [ForeignType(typeof(<%=ClassName(foreignKey.PrimaryKeyTable)%>))]
        <%}
        }
        }%>
		[Column<%=column.IsPrimaryKeyMember ? "(IsPrimaryKey = true)" : column.IsUnique ? "(IsUnique = true)" : IsIndex(column) ? "(IsIndex = true)" : null%>]
		public <%= MemberType(column) %> <%= PropertyName(column) %> { get; set; }	
        
		<% } %>
		#endregion
	}
	#endregion
	<%if(SourceTable.ForeignKeys.Count!=0){%>
	
	#region <%= ViewClassName(SourceTable) %>
	/// <summary>
	/// <%= ViewClassName(SourceTable) %>.
	<% if(!String.IsNullOrEmpty(SourceTable.Description)){%>
	/// <%=SourceTable.Description%>
	<% } %>
	/// </summary>
    <%foreach(TableKeySchema key in SourceTable.ForeignKeys){%>
	[TableJoin(typeof(<%=ClassName(key.PrimaryKeyTable)%>), <%=ForeignKeysName(key)%>, AliasName = "<%=ForeignTableAliasName(key)%>")]
	<%}%>
	[Serializable]
	public partial class <%= ViewClassName(SourceTable) %> : <%= ClassName(SourceTable) %>
	{
		#region Constant       
        public static class Properties
        {
			<%foreach(TableKeySchema key in SourceTable.ForeignKeys){%>
				<%foreach(ColumnSchema column in key.PrimaryKeyTable.NonKeyColumns){%>
		    public const string	<%= ForeignPropertyName(key,column)%> = "<%=ForeignPropertyName(key,column)%>";			
				<%}%>			
			<%}%>
        }
		#endregion

		#region Public Properties
		<%foreach(TableKeySchema key in SourceTable.ForeignKeys){%>
			<%foreach(ColumnSchema column in key.PrimaryKeyTable.NonKeyColumns){%>
		/// <summary>
		/// <%=column.Name + " of " + ForeignTableAliasName(key)%>
		/// </summary>
		[ForeignColumn("<%=ForeignTableAliasName(key)%>", Property = <%=ClassName(key.PrimaryKeyTable)%>.Properties.<%= PropertyName(column )%>)]
		public <%= NullableType(column) %> <%= ForeignPropertyName(key, column) %> { get; set; }	
        
			<%}%>	
		<% } %>
		#endregion
	}
	#endregion	
	<%}%>
}
